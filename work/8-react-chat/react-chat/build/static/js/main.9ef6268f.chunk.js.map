{"version":3,"sources":["errorMessages.js","components/Login.jsx","services.js","components/SendMessage.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["errorMessages","Login","props","useState","username","setUsername","isDisabled","setIsDisabled","isPending","setIsPending","status","setStatus","className","class","disabled","onChange","e","target","value","onClick","fetch","method","headers","Headers","body","JSON","stringify","catch","Promise","reject","error","then","response","ok","json","createSession","users","onLogin","setUsers","err","SendMessage","message","setMessage","placeholder","text","sendNewMessage","setMessages","console","onLogout","App","isLoggedIn","userState","setUserState","messages","useEffect","allSettled","resultArr","login","logout","id","Object","values","map","user","index","sender","timestamp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ef6268f.chunk.js","sourcesContent":["export const errorMessages = {\n    'username-invalid': 'The username you entered is invalid',\n};\n","import { useState } from 'react';\nimport { createSession } from '../services';\nimport { errorMessages } from '../errorMessages';\n\nconst Login = function (props) {\n    const [username, setUsername] = useState('');\n    const [isDisabled, setIsDisabled] = useState(true);\n    const [isPending, setIsPending] = useState(false);\n    const [status, setStatus] = useState('');\n\n    const onChange = (e) => {\n        setStatus('');\n        setUsername(e.target.value);\n        setIsDisabled(!e.target.value);\n    };\n\n    const login = () => {\n        setIsPending(true);\n        createSession({ username })\n            .then((users) => {\n                props.onLogin({ username });\n                setStatus('');\n                setIsPending(false);\n                props.setUsers(users);\n            })\n            .catch((err) => {\n                setUsername('');\n                setStatus(errorMessages[err]);\n                setIsPending(false);\n            });\n    };\n\n    return (\n        <div className='login-panel'>\n            {status && <div class='status'>{status}</div>}\n            <label>\n                Username:\n                <input\n                    disabled={isPending}\n                    onChange={onChange}\n                    value={username}\n                />\n            </label>\n            <button onClick={login} disabled={isDisabled || isPending}>\n                {isPending ? '...' : 'Login'}\n            </button>\n        </div>\n    );\n};\nexport default Login;\n","export const checkSession = () => {\n    return fetch('/api/session', {\n        method: 'GET',\n    })\n        .catch(() => Promise.reject({ error: 'network-error' }))\n        .then((response) => {\n            if (response.ok) {\n                return response.json();\n            }\n            return response.json().then((json) => Promise.reject(json));\n        });\n};\n\nexport const createSession = ({ username }) => {\n    return fetch('/api/session', {\n        method: 'POST',\n        headers: new Headers({\n            'content-type': 'application/json',\n        }),\n        body: JSON.stringify({ username }),\n    })\n        .catch(() => Promise.reject({ error: 'network-error' }))\n        .then((response) => {\n            if (response.ok) {\n                return response.json();\n            }\n            return response.json().then((json) => Promise.reject(json));\n        });\n};\n\nexport const endSession = () => {\n    return fetch('/api/session', {\n        method: 'DELETE',\n    })\n        .catch(() => Promise.reject({ error: 'network-error' }))\n        .then((response) => {\n            if (response.ok) {\n                return response.json();\n            }\n            return response.json().then((json) => Promise.reject(json));\n        });\n};\n\nexport const getUserList = () => {\n    return fetch('/api/users', {\n        method: 'GET',\n    })\n        .catch(() => Promise.reject({ error: 'network-error' }))\n        .then((response) => {\n            if (response.ok) return response.json();\n            else return response.json().then((json) => Promise.reject(json));\n        });\n};\n\nexport const getMessageList = () => {\n    return fetch('/api/messages', {\n        method: 'GET',\n    })\n        .catch(() => Promise.reject({ error: 'network-error' }))\n        .then((response) => {\n            if (response.ok) return response.json();\n            else return response.json().then((json) => Promise.reject(json));\n        });\n};\n\nexport const sendNewMessage = ({ text }) => {\n    return fetch('/api/messages', {\n        method: 'POST',\n        headers: new Headers({\n            'content-type': 'application/json',\n        }),\n        body: JSON.stringify({ text }),\n    })\n        .catch(() => Promise.reject({ error: 'network-error' }))\n        .then((response) => {\n            if (response.ok) return response.json();\n            else return response.json().then((json) => Promise.reject(json));\n        });\n};\n","import { useState } from 'react';\nimport { endSession, sendNewMessage } from '../services';\n\nconst SendMessage = function (props) {\n    const [message, setMessage] = useState('');\n    const [isDisabled, setIsDisabled] = useState(true);\n    const [isPending, setIsPending] = useState(false);\n\n    const onChange = (e) => {\n        setMessage(e.target.value);\n        setIsDisabled(!e.target.value);\n    };\n\n    const logout = () => {\n        endSession()\n            .then((users) => {\n                props.onLogout(users);\n            })\n            .catch((err) => {\n                console.error('ERROR logging out', err);\n            });\n    };\n\n    const sendMessage = () => {\n        setIsPending(true);\n        sendNewMessage({ text: message })\n            .then((response) => {\n                setIsPending(false);\n                setMessage('');\n                props.setMessages(response);\n            })\n            .catch((err) => {\n                console.error('ERROR adding new message', err);\n                setIsPending(false);\n            });\n    };\n\n    return (\n        <div className='outgoing'>\n            <input\n                disabled={isPending}\n                onChange={onChange}\n                value={message}\n                placeholder='Enter message to send'\n            />\n            <button onClick={sendMessage} disabled={isDisabled}>\n                Send\n            </button>\n            <button className='logout' onClick={logout}>\n                Logout\n            </button>\n        </div>\n    );\n};\nexport default SendMessage;\n","import React, { useState, useEffect } from 'react';\n\nimport {\n    endSession,\n    checkSession,\n    getUserList,\n    getMessageList,\n} from './services';\nimport Login from './components/Login';\nimport SendMessage from './components/SendMessage';\nimport './App.css';\n\nfunction App() {\n    const [userState, setUserState] = useState({\n        isLoggedIn: false,\n        isPending: true,\n    });\n    const [messages, setMessages] = useState([]);\n    const [users, setUsers] = useState({});\n\n    useEffect(() => {\n        Promise.allSettled([\n            getUserList(),\n            getMessageList(),\n            checkSession(),\n        ]).then((resultArr) => {\n            if (resultArr[0].status === 'fulfilled') {\n                setUsers(resultArr[0].value);\n            }\n            if (resultArr[1].status === 'fulfilled') {\n                setMessages(resultArr[1].value);\n            }\n            if (resultArr[2].status === 'fulfilled') {\n                setUserState({\n                    isLoggedIn: true,\n                    isPending: false,\n                    username: resultArr[2].value.username,\n                });\n            } else {\n                setUserState({\n                    isLoggedIn: false,\n                    isPending: false,\n                });\n            }\n        });\n    }, []);\n\n    const login = function ({ username }) {\n        setUserState({\n            isLoggedIn: true,\n            isPending: false,\n            username,\n        });\n    };\n\n    const logout = function (users) {\n        setUserState({\n            isLoggedIn: false,\n            isPending: false,\n        });\n        setUsers(users);\n    };\n\n    if (userState.isPending) {\n        return <div className='app'>Loading...</div>;\n    }\n\n    const messageList = () => {\n        return (\n            <ol className='messages'>\n                {messages.map((message, index) => (\n                    <li key={index}>\n                        <div className='message'>\n                            <div className='meta-info'>\n                                <div className='sender-info'>\n                                    <span className='username'>\n                                        {message.sender}\n                                    </span>\n                                </div>\n                                <div className='message-info'>\n                                    <span className='timestamp'>\n                                        {message.timestamp}\n                                    </span>\n                                </div>\n                            </div>\n                            <p className='message-text'>{message.text}</p>\n                        </div>\n                    </li>\n                ))}\n            </ol>\n        );\n    };\n\n    const userList = () => {\n        return (\n            <ul className='users'>\n                {Object.values(users).map((user) => (\n                    <li key={user.username}>\n                        <div className='user'>\n                            <span className='username'>{user.username}</span>\n                        </div>\n                    </li>\n                ))}\n            </ul>\n        );\n    };\n\n    const getOutgoing = () => {\n        if (userState.isLoggedIn) {\n            return (\n                <SendMessage\n                    username={userState.username}\n                    onLogout={logout}\n                    setMessages={setMessages}\n                />\n            );\n        }\n        return <Login onLogin={login} setUsers={setUsers} />;\n    };\n\n    return (\n        <div id='chat-app'>\n            <div className='display-panel'>\n                {userList()}\n                {messageList()}\n            </div>\n            {getOutgoing()}\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}